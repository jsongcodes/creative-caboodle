import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["variant", "indicator", "textColor"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { styled } from '@mui/material/styles';
import useTabsList from '@mui/base/useTabsList';
import { jsx as _jsx } from "react/jsx-runtime";
const FlexContainer = styled('div', {
  name: 'MuiTabs',
  slot: 'FlexContainer',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.flexContainer, ownerState.vertical && styles.flexContainerVertical, ownerState.centered && styles.centered];
  }
})(({
  ownerState
}) => _extends({
  display: 'flex'
}, ownerState.vertical && {
  flexDirection: 'column'
}, ownerState.centered && {
  justifyContent: 'center'
}));

/**
 * @ignore - internal component.
 */
const TabsList = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
      variant,
      indicator,
      textColor
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    getRootProps,
    processChildren
  } = useTabsList(_extends({}, props, {
    ref
  }));
  const processedChildren = processChildren();
  const children = React.Children.map(processedChildren, child => {
    return /*#__PURE__*/React.cloneElement(child, {
      indicator,
      textColor,
      fullWidth: variant === 'fullWidth'
    });
  });
  return /*#__PURE__*/_jsx(FlexContainer, _extends({}, other, getRootProps(), {
    children: children
  }));
});
process.env.NODE_ENV !== "production" ? TabsList.propTypes = {
  indicator: PropTypes.node,
  textColor: PropTypes.oneOf(['primary', 'secondary']),
  variant: PropTypes.oneOf(['fullWidth', 'scrollable', 'standard'])
} : void 0;
export default TabsList;